library(ggplot2)
require(gridExtra)
df = overlap_rects
#xmin_l <- df$xmin
#xmax_l <- df$xmax
#ymin_l <- df$ymin
#ymax_l <- df$ymax
#plot_all <- ggplot(df, aes_string(xmin = df$xmin, xmax =df$xmax, ymin = df$ymin, ymax =df$ymax )) +
#	geom_rect(color = NA, fill = "pink", alpha = 0.4) #+ theme_void() + theme(plot.background = element_rect(fill = "black"))
#df_int <- df[c(4,5),]
#plot_intersecting <- ggplot(df_int, aes_string(xmin = df_int$xmin, xmax =df_int$xmax, ymin = df_int$ymin, ymax =df_int$ymax )) +
#	geom_rect(fill = "pink", alpha = 0.4) #+ theme_void() + theme(plot.background = element_rect(fill = "black"))
p_list <- list()
i=0
library(ggplot2)
require(gridExtra)
source( "functions.R" )
########################################################################################## load matrices
taxonomy_reference = read_tsv("../reconciliation/taxonomy_info/taxon_table.tsv")
clades = c( "Fungi", "Ichthyosporea", "Filasterea", "Choanoflagellida", "Ctenophora",
"Porifera", "Placozoa", "Bilateria", "Cnidaria" )
# raw columns:
# component_number, matrix, partition_name, edges, nodes_in_component, component_density, BUSCO_ID, BUSCO_description,
# SwissProt_accession, SwissProt_description, GO_annotations, ribo_found
partition_map_global =
read_tsv("../reconciliation/blast/graphs/partition_components_split_annotated.tsv") %>% #component nr first occurance
dplyr::rename(partition = partition_name) %>%
mutate( component_number = as.character(component_number) )
taxa =
taxonomy_reference %>%
distinct( relabelled_name, clade_assignment, ncbi_tax_id ) %>%
dplyr::rename( taxon = relabelled_name, clade = clade_assignment ) %>%
mutate( clade = factor( clade, levels = clades )  )
matrix_path = "../data_processed/phy_files"
phylip_file_names = list.files(path = matrix_path, pattern = ".+\\.phy$", full.names = TRUE)
#sequence_matrices = foreach( phylip_file = phylip_file_names) %dopar% parse_phylip( phylip_file )   #Error messages?
sequence_matrices = lapply(phylip_file_names , parse_phylip)
# Matrix gene composition
busco_results =
read_tsv("../reconciliation/blast/graphs/busco_metazoa_results.tsv") %>%
filter( Status != "Missing" )
# Multiple fields are in one colon delimited string. Need to parse them out.
# Busco result example
# "Moroz2014:ED3a:Capitella:51293:0241"
# manuscript:matrix:species:NCBI_taxon_id:partition
Bs =
str_split_fixed( busco_results$Sequence, ":", 4 ) %>%
as_tibble()
names( Bs ) = c( "matrix", "species", "ncbi_taxon_id", "partition" )
Bs %<>% mutate( ncbi_taxon_id = as.integer(ncbi_taxon_id) )
busco_results %<>% bind_cols( Bs )
# Combine and summarize results
busco_distinct =  busco_results %>% select( matrix, partition, Description ) %>% distinct(  )
partition_to_busco_map =
busco_distinct %>%
group_by( matrix, partition ) %>%
summarise( BUSCO = names(which(table(Description) == max(table(Description)))[1]) )
partition_map_global %<>% left_join( partition_to_busco_map, by = c("matrix", "partition") )
# Matrix overlap
matrix_overlap =
lapply(sequence_matrices, function(x) lapply(sequence_matrices, function(y) compute_matrix_overlap(x, y))) %>%
unlist(recursive = FALSE) %>%
bind_rows()
overlap_rects =
lapply(sequence_matrices, function(x) lapply(sequence_matrices, function(y) overlap_rects(x, y))) %>%
unlist(recursive = FALSE) %>%
bind_rows()
matrix_overlap =
lapply(sequence_matrices, function(x) lapply(sequence_matrices, function(y) compute_matrix_overlap(x, y))) %>%
unlist(recursive = FALSE) %>%
bind_rows()
compute_matrix_overlap = function( msa1, msa2 ){
#component nr of overlapping genes sequence_matrices[[2]]@partitions$component_number[na.omit(sequence_matrices[[2]]@partitions$component_number) %in% na.omit(sequence_matrices[[1]]@partitions$component_number) == TRUE]
n_gene_overlap = sum( na.omit(msa1@partitions$component_number) %in% na.omit(msa2@partitions$component_number) )
n_species_overlap = sum( rownames(msa1) %in% rownames(msa2) )
tibble(
manuscript_name_1 = msa1@manuscript_name,
matrix_name_1 = msa1@matrix_name,
n_species_1 = nrow( msa1 ),
n_partitions_1 = nrow( msa1@partitions ),
manuscript_name_2 = msa2@manuscript_name,
matrix_name_2 = msa2@matrix_name,
n_species_2 = nrow( msa2 ),
n_partitions_2 = nrow( msa2@partitions ),
n_species_overlap = n_species_overlap,
n_gene_overlap = n_gene_overlap
)
}
overlap_rects = function( msa1, msa2 ){
overlap = compute_matrix_overlap( msa1, msa2 )
# Create a dataframe where each row is one of the matrices in the pairwise comparison and
# the columns describe how to draw the rectangle for matrix
# First row is msa1 rectangle, second row is msa2 rectangle
D = data.frame( MSA = c("Matrix_1", "Matrix_2") )
D$xmin = c( 0, overlap$n_partitions_1 - overlap$n_gene_overlap ) #nr of genes in matrix 1 - nr of overlapping genes, nr of genes not sorted by position(?)
D$xmax = c( overlap$n_partitions_1, overlap$n_partitions_1 + overlap$n_partitions_2 - overlap$n_gene_overlap )
D$ymin = c(0, overlap$n_species_1 - overlap$n_species_overlap )
D$ymax = c( overlap$n_species_1, overlap$n_species_1 + overlap$n_species_2 - overlap$n_species_overlap )
D$manuscript_1 = msa1@manuscript_name
D$manuscript_2 = msa2@manuscript_name
D$matrix_1 = msa1@matrix_name
D$matrix_2 = msa2@matrix_name
D
}
overlap_rects =
lapply(sequence_matrices, function(x) lapply(sequence_matrices, function(y) overlap_rects(x, y))) %>%
unlist(recursive = FALSE) %>%
bind_rows()
library(ggplot2)
require(gridExtra)
source( "functions.R" )
